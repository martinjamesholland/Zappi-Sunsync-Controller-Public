---
description: 
globs: 
alwaysApply: true
---
Key Principles
  - Write concise, technical responses with accurate PHP examples.
  - Follow Laravel best practices and conventions.
  - Use object-oriented programming with a focus on SOLID principles.
  - Prefer iteration and modularization over duplication.
  - Use descriptive variable and method names.
  - Use lowercase with dashes for directories (e.g., app/Http/Controllers).
  - Favor dependency injection and service containers.
- Write clear, concise, and technical responses with precise Bootstrap examples.
    - Utilize Bootstrap's components and utilities to streamline development and ensure responsiveness.
    - Prioritize maintainability and readability; adhere to clean coding practices throughout your HTML and CSS.
    - Use descriptive class names and structure to promote clarity and collaboration among developers.
Bootstrap Usage
    - Leverage Bootstrap's grid system for responsive layouts; use container, row, and column classes to structure content.
    - Utilize Bootstrap components (e.g., buttons, modals, alerts) to enhance user experience without extensive custom CSS.
    - Apply Bootstrap's utility classes for quick styling adjustments, such as spacing, typography, and visibility.
    - Ensure all components are accessible; use ARIA attributes and semantic HTML where applicable.

  PHP/Laravel
  - Use PHP 8.2+ features when appropriate (e.g., typed properties, match expressions).
  - Follow PSR-12 coding standards.
  - Use strict typing: declare(strict_types=1);
  - Utilize Laravel's built-in features and helpers when possible.
  - File structure: Follow Laravel's directory structure and naming conventions.
  - Implement proper error handling and logging:
    - Use Laravel's exception handling and logging features.
    - Create custom exceptions when necessary.
    - Use try-catch blocks for expected exceptions.
  - Use Laravel's validation features for form and request validation.
  - Implement middleware for request filtering and modification.
  - Utilize Laravel's Eloquent ORM for database interactions.
  - Use Laravel's query builder for complex database queries.
  - Implement proper database migrations and seeders.

  Dependencies
  - Laravel (latest stable version)
  - Composer for dependency management
- Bootstrap (latest version, CSS and JS)
    - Any JavaScript framework (like jQuery, if required) for interactive components.

    Error Handling and Validation
    - Implement form validation using Bootstrap's built-in styles and classes to enhance user feedback.
    - Use Bootstrap's alert component to display error messages clearly and informatively.
    - Structure forms with appropriate labels, placeholders, and error messages for a better user experience.

Bootstrap-Specific Guidelines
    - Customize Bootstrap's Sass variables and mixins to create a unique theme without overriding default styles.
    - Utilize Bootstrap's responsive utilities to control visibility and layout on different screen sizes.
    - Keep custom styles to a minimum; use Bootstrap's classes wherever possible for consistency.
    - Use the Bootstrap documentation to understand component behavior and customization options.

    Performance Optimization
    - Minimize file sizes by including only the necessary Bootstrap components in your build process.
    - Use a CDN for Bootstrap resources to improve load times and leverage caching.
    - Optimize images and other assets to enhance overall performance, especially for mobile users.

  Laravel Best Practices
  - Use Eloquent ORM instead of raw SQL queries when possible.
  - Implement Repository pattern for data access layer.
  - Use Laravel's built-in authentication and authorization features.
  - Utilize Laravel's caching mechanisms for improved performance.
  - Implement job queues for long-running tasks.
  - Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
  - Implement API versioning for public APIs.
  - Use Laravel's localization features for multi-language support.
  - Implement proper CSRF protection and security measures.
  - Use Laravel Mix for asset compilation.
  - Implement proper database indexing for improved query performance.
  - Use Laravel's built-in pagination features.
  - Implement proper error logging and monitoring.

  Key Conventions
  1. Follow Laravel's MVC architecture.
  2. Use Laravel's routing system for defining application endpoints.
  3. Implement proper request validation using Form Requests.
  4. Use Laravel's Blade templating engine for views.
  5. Implement proper database relationships using Eloquent.
  6. Use Laravel's built-in authentication scaffolding.
  7. Implement proper API resource transformations.
  8. Use Laravel's event and listener system for decoupled code.
  9. Implement proper database transactions for data integrity.
  10. Use Laravel's built-in scheduling features for recurring tasks.
  11. Follow Bootstrap's naming conventions and class structures to ensure consistency across your project.
  12. Prioritize responsiveness and accessibility in every stage of development.
  13. Maintain a clear and organized file structure to enhance maintainability and collaboration.

    Refer to the Bootstrap documentation for best practices and detailed examples of usage patterns.

Function Roles
Please:
1. Ask any clarifying questions you need
2. Create a detailed project plan
3. Confirm you'll work through this step-by-step
4. Wait for my confirmation at each major stage
5. Help me test functionality as we go

Important: Don't try to build everything at once! Let's work methodically and ensure each piece works before moving on.
